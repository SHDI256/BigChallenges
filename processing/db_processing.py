import psycopg2


def get_connect():
    conn = psycopg2.connect(host='127.0.0.1', port='5432',
                            user='bot', password='1234', dbname='biometry_db')
    return conn


def db_init(flag=False):
    with get_connect() as conn:
        cur = conn.cursor()
        print("Opened database successfully")

        cur.execute("create extension if not exists CUBE;")

        try:
            if flag:
                cur.execute("DROP TABLE IF EXISTS USER_TABLE")
                print('Drop database successfully')
        except Exception:
            print('Can not search USER_TABLE')

        cur.execute('''CREATE TABLE USER_TABLE
              (ID        INT GENERATED BY DEFAULT AS IDENTITY,
              USERNAME   VARCHAR                 NOT NULL,
              SEX        INT                     NOT NULL,
              AGE        INT                     NOT NULL,
              VEC_TMP    CUBE,
              VEC_LOW    CUBE, 
              VEC_HIGH   CUBE
              );''')
        print("Table created successfully")

        conn.commit()


def add_user(username, age, sex, face_encodings, before_values):
    with get_connect() as conn:
        cur = conn.cursor()
        query = f'''INSERT INTO USER_TABLE (USERNAME, AGE, SEX, VEC_LOW, VEC_HIGH, VEC_TMP) 
        VALUES ('{username}', {age}, {sex},
        CUBE(array[{','.join(str(s) for s in face_encodings[0:64])}]), 
        CUBE(array[{','.join(str(s) for s in face_encodings[64:128])}]),
        CUBE(array[{','.join(str(s) for s in before_values)}]));'''
        cur.execute(query)
        conn.commit()


def search_by_id(id):
    with get_connect() as conn:
        cur = conn.cursor()
        query = f'''SELECT * FROM USER_TABLE WHERE ID = {id};'''
        cur.execute(query)
        return cur.fetchone()


def update_before_values_user(id, calc_parameters):
    with get_connect() as conn:
        cur = conn.cursor()
        query = f'''UPDATE USER_TABLE SET ID = {id} WHERE VEC_TMP = 
            CUBE(array[{','.join(str(s) for s in calc_parameters)}]);'''
        cur.execute(query)
        conn.commit()


def search_by_face(detected_faces_encodings):
    with get_connect() as conn:
        cur = conn.cursor()
        threshold = 0.6
        query = f'''SELECT ID FROM USER_TABLE WHERE 
        sqrt(power(CUBE(array[{','.join(str(s) for s in detected_faces_encodings[0:64])}]) <-> VEC_LOW, 2) + 
        power(CUBE(array[{','.join(str(s) for s in detected_faces_encodings[64:128])}]) <-> VEC_HIGH, 2)) 
        <= {threshold} ''' + \
                f'''ORDER BY sqrt(
                power(CUBE(array[{','.join(str(s) for s in detected_faces_encodings[0:64])}]) <-> VEC_LOW, 2) + 
                power(CUBE(array[{','.join(str(s) for s in detected_faces_encodings[64:128])}]) <-> VEC_HIGH, 2));'''
        cur.execute(query)
        sol = cur.fetchone()
        return sol
